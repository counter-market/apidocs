# Models

## Token

Token trading on our exchange

```javascript
{
  code: 0
  symbol: "ETH"
  name: "Ethereum"
  decimalPlaces: 18
  contractAddress: null
}
```

Attribute | Type | Description
--------- | ---- | -----------
code | number | Token code
symbol | string | Token ticker symbol
name| string | Token name
decimalPlaces | number | number of pennies in 1 token coin. (i.e 1 ETH = 10<sup>18</sup> of WEI so for ETH decimalPlaces = 18)
contractAddress | string / null | for ERC-20 tokens: token's smart contract address, for ETH: null

## Trade

Market's trade

```javascript
{
  id: "123abcdef",
  timestamp: "2019-02-10 15:45:00",
  type: "buy",
  stockTokenCode: 2,
  cashTokenCode: 1,
  cashPriceE8: "0xde0b6b3a7640000",
  stockAmount: "0xde0b6b3a7640000",
  maker: "0x1234567890123456789012345678901234567890",
  taker: "0x1234567890123456789012345678901234567890"
}
```

Attribute | Type | Description
--------- | ---- | -----------
id        | string | Unique identificator
timestamp | string | Creation timestamp: `YYYY-MM-DD HH:mm:ss`
type      | string | Order type: `buy / sell`
stockTokenCode | string | stock [Token](#token)'s code
cashTokenCode | string | cash [Token](#token)'s code
cashPrice | string | HEX of cash price * 10<sup>8</sup>
stockAmount | string | HEX of stock amount in pennies: coins count * 10<sup>token decimal count</sup>
maker | string | maker's eth address
taker | string | taker's eth address

## Order book

Market's orderbook entity. Stock amount is equal to sum of all order's volumes of given type in given cash price range.

```javascript
{
  minCashPriceE8: "0xde0b6b3a7640000",
  maxCashPriceE8: "0xde0b6b3a7640000",
  stockAmount: "0xde0b6b3a7640000",
  type: "buy"
}
```

Attribute | Type | Description
--------- | ---- | -----------
minCashPriceE8 | string | HEX of `min` value of cash price range * 10<sup>8</sup>
maxCashPriceE8 | string | HEX of `max` value of cash price range * 10<sup>8</sup>
stockAmount | string | HEX of stock amount in pennies: coins count * 10<sup>token decimal count</sup>
type | string | Order type: `(buy / sell)

## Order

```javascript
{
  id: "123abcdef",
  stockTokenCode: 2,
  cashTokenCode: 1,
  type: "buy",
  stockAmount: "0xde0b6b3a7640000",
  cashPrice: "0xde0b6b3a7640000",
  maker: "0x1234567890123456789012345678901234567890",
  fulfilledStockAmount: "0xde0b6b3a7640000",
  expiryDate: "2019-02-10 15:45:00",
  createdAt: "2019-02-10 15:45:00"
}
```

Attribute | Type | Description
--------- | ---- | -----------
id | string | Identificator
stockTokenCode | number | stock [Token](#token)'s code
cashTokenCode | number | cash [Token](#token)'s code
type | string | Order type: `buy / sell`
stockAmount | string | HEX of stock amount in pennies: coins count * 10<sup>token decimal count</sup>
cashPrice | string | HEX of cash price * 10<sup>8</sup>
fulfilledStockAmount | string | HEX of order's amount which has been partly fullfiled already
expiryDate | string | Expiry date: `YYYY-MM-DD HH:mm:ss`
createdAt | string | Creation timestamp: `YYYY-MM-DD HH:mm:ss`

## Token Account

Each wallet has few fundings in several of the tokens trading on the platform. We name such a relation as a `Token Account`

```javascript
{
  id: "123abcdef",
  tokenCode: 1,
  totalAmount: "0xde0b6b3a7640000",
  onOrders: "0xde0b6b3a7640000"
}
```

Attribute | Type | Description
--------- | ---- | -----------
id | string | Identificator
tokenCode | string | [Token](#token)'s code
totalAmount | string | HEX of stock amount in pennies: coins count * 10<sup>token decimal count</sup>
onOrders | string | HEX of on orders fund amount in pennies: coins count * 10<sup>token decimal count</sup>

## Funding

```javascript
{
  id: "123abcdef",
  type: "buy",
  amount: "0xde0b6b3a7640000",
  tokenCode: 1,
}
```

Attribute | Type | Description
--------- | ---- | -----------
id | string | Identificator
tokenCode | number | [Token](#token)'s code
type | string | Order type: `buy / sell`
amount | string | HEX of stock amount in pennies: coins count * 10<sup>token decimal count</sup>
transactionStatus | object | [Transaction Status](#transaction-status) model

## Transaction status

```javascript
{
  state: "final",
  txHash: "0xd22b381c1dec5fdbc14dfd5a0072832728e2e36bacb1443178d62463a3ef4705",
  confirmations: 10,
  timestamp: "2019-02-10 15:45:00"
}
```

Attribute | Type | Description
--------- | ---- | -----------
state | string | Transaction status: `(signed / pending / mined / final)`
txHash | string / null | Hash of transaction or null
confirmations | number | Number of confirmations
timestamp | string | Timestamp transaction was mined at: `YYYY-MM-DD HH:mm:ss`