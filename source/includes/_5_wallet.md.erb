# Wallet

## Get orders for market

> CURL

```shell
curl "<%= data.urls.arbiter %>/wallets/0x1234567890123456789012345678901234567890/orders/DAI/ETH"
  -X GET
  -H "Authorization: YOUR-AUTHORIZATION-KEY"
  -H "Content-Type: application/json"
```

This endpoint returns unfulfilled orders of `<ETHAddress>` wallet in `<StockTokenSymbol>/<CashTokenSymbol>` market

### HTTP Request

`GET <%= data.urls.arbiter %>/wallets/<ETHAddress>/orders/<StockTokenSymbol>/<CashTokenSymbol>`

### URL Parameters

Parameter | Description
--------- | -----------
ETHAddress | ETH address of one of your linked wallets

### Server response

List of [Order](#order)s:

{
  items: [ [Order](#order), ... ],
  total: TOTAL_NUMBER_OF_TOTALS
}

## Get all token accounts

> CURL

```shell
curl "<%= data.urls.arbiter %>/wallets/0x1234567890123456789012345678901234567890/token-accounts"
  -X GET
  -H "Authorization: YOUR-AUTHORIZATION-KEY"
  -H "Content-Type: application/json"
```

This endpoint returns all [Token Account](#token-account)s for `<ETHAddress>` wallet

### HTTP Request

`GET <%= data.urls.arbiter %>/wallets/<ETHAddress>/token-accounts`

### Server response

List of [Token Account](#token-account)s for a binded `<ETHAddress>` wallet:

[
  [Token Account](#token-account), ...
]

## Get all trades

> CURL

```shell
curl "<%= data.urls.arbiter %>/wallets/0x1234567890123456789012345678901234567890/trades"
  -X GET
  -H "Authorization: YOUR-AUTHORIZATION-KEY"
  -H "Content-Type: application/json"
```

This endpoint returns the list of [Trade](#trade)s of `<ETHAddress>` wallet

### HTTP Request

`GET <%= data.urls.arbiter %>/wallets/<ETHAddress>/trades`

### Server response

List of [Trade](#trade)'s for a binded wallet with given `<ETHAddress>`:

{
  items: [ [Trade](#trade), ... ],
  total: TOTAL_NUMBER_OF_TRADES
}

## Get nonces

This endpoint returns exchange operation nonces for given `<ETHAddress>` wallet

> CURL

```shell
curl "<%= data.urls.arbiter %>/wallets/0x1234567890123456789012345678901234567890/nonces"
  -X GET
  -H "Authorization: YOUR-AUTHORIZATION-KEY"
  -H "Content-Type: application/json"
```

> RESPONSE

```javascript
{
  trade: 22,
  withdraw: 12
}
```

### HTTP Request

`GET <%= data.urls.arbiter %>/wallets/<ETHAddress>/nonces`

### Server response

Dictionary of ETH transaction nonces for each of the exchange operations: `trade`, `withdraw`:

`
{
  trade: NONCE_FOR_TRADE_OPERATION,
  witdraw: NONCE_FOR_WITHDRAW_OPERATION,
}
`

## Deposit

> CURL

```shell
curl "<%= data.urls.arbiter %>/wallets/0x1234567890123456789012345678901234567890/deposits"
  -X PUT
  -H "Authorization: YOUR-AUTHORIZATION-KEY"
  -H "Content-Type: application/json"
  --data '{"tokenCode": 2, "amount": "0xA", "txHash": "0x123"}'
```

Deposit funds to `<ETHAddress>` wallet

### Depositing `ETH`:

Step 1 - Invoke `depositEther` method of `TREASURY` smart contract by sending transaction from corresponding ethereum account.
  Set transaction value equal to amount of `ETH` you wanna to deposit.
  Refer to smart contract method's arguments:

  Argument number | Type | Description
  --------------- | ---- | -----------
  0 | string | Address of ethereum account binded to wallet to deposit to

  <aside class="notice">
    NOTE: This transaction's hash will be used lately as parameter to an API call.
  </aside>

Step 2 - Make an API call

### Depositing `ERC-20` tokens:

Step 1 - Invoke `approve` method of `ERC-20` token's smart contract to grant `TREASURY` smart contract to operate with allowed amount of your `ERC-20` tokens from your behalf.
  Use [Token](#token)'s `contractAddress` as a receiver address for this transaction.

Step 2 - Invoke `depositERC20Token` method of `TREASURY` smart contract with the following arguments:

  Argument number | Type | Description
  --------------- | ---- | -----------
  0 | string | [Token Account](#token-account) id
  1 | string | HEX of token amount to deposit in `pennies`

  <aside class="notice">
    NOTE: This transaction's hash will be used lately as parameter to an API call.
  </aside>

Step 3 - Make an API call

### HTTP Request

`PUT <%= data.urls.arbiter %>/wallets/<ETHAddress>/deposits`

### Body JSON Parameters

Parameter | Type | Description
--------- | ---- | -----------
tokenCode | number | Code of the token
amount | string | HEX of deposit amount in pennies (multiplied by 10^token decimal places count)
txHash | string | Hash of Ethereum transaction

### Server response

Empty response

## Withdraw

> CURL

```shell
curl "<%= data.urls.arbiter %>/wallets/0x1234567890123456789012345678901234567890/withdrawals"
  -X PUT
  -H "Authorization: YOUR-AUTHORIZATION-KEY"
  -H "Content-Type: application/json"
  --data '{"tokenCode": 2, "amount": "0xA", "withdrawAddress": "0x123", "withdrawNonce": 10, "signature": "0x123"}'
```

Withdraw funds from `<ETHAddress>` wallet

### Flow

Step 1 - Sign following structure with wallet's ethereum address you wanna to withdraw funds from

Attribute | Type | Description
--------- | ---- | -----------
tokenCode | uint256 | [Token](#token) code
withdrawAddress | address | ETH address to withdraw to
amount | uint256 | Amount of funds (in `pennies`) to withdraw in HEX
withdrawFeeE5 | uint256 | The vallue of `WITHDRAWAL_FEE` * 10<sup>3</sup> in HEX
withdrawNonce | uint256 | wallet's `nonce` for `withdraw` operation

Step 2 - Make an API call

### HTTP Request

`PUT <%= data.urls.arbiter %>/wallets/<ETHAddress>/withdrawals`

### Body JSON Parameters

Parameter | Type | Description
--------- | ---- | -----------
tokenCode | number | Code of the token
amount | string | HEX of withdraw amount in pennies (multiplied by 10^token decimal places count)
withdrawAddress | string | ETH address to withdraw to
withdrawFeeE5 | string | The vallue of `WITHDRAWAL_FEE` * 10<sup>3</sup> in HEX
withdrawNonce | number | wallet's `nonce` for `withdraw` operation
signature | string | Ethereum signature (from step 1)

### Server response

Empty response

## Get all fundings

> CURL

```shell
curl "<%= data.urls.arbiter %>/wallets/0x1234567890123456789012345678901234567890/fundings"
  -X GET
  -H "Authorization: YOUR-AUTHORIZATION-KEY"
  -H "Content-Type: application/json"
```

This endpoints returns list of [Funding](#funding)s of <ETHAddress> wallet

### HTTP Request

`PUT <%= data.urls.arbiter %>/wallets/<ETHAddress>/fundings`

### Server response

List of [Funding](#funding)s of the wallet binded to `<ETHAddress>`:

<code>
{
  items: [ [Funding](#funding), ... ],
  total: TOTAL_NUMER_OF_FUNDINGS
}
</code>